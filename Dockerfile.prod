# Base node image
FROM node:20.18.0-alpine AS base

# Install dependencies only when needed
FROM base AS deps

# Add libc6-compat for Alpine Linux compatibility
RUN apk add --no-cache libc6-compat

# ARG DOPPLER_TOKEN

# ARG DOPPLER_TOKEN
# ENV DOPPLER_TOKEN=${DOPPLER_TOKEN}

# RUN wget -q -t3 'https://packages.doppler.com/public/cli/rsa.8004D9FF50437357.key' -O /etc/apk/keys/cli@doppler-8004D9FF50437357.rsa.pub && \
#     echo 'https://packages.doppler.com/public/cli/alpine/any-version/main' | tee -a /etc/apk/repositories && \
#     apk add -u doppler

WORKDIR /app

# # Download secrets and ensure the file exists
# RUN doppler secrets download --format=env --no-file > .env && \
#     cat .env && \
#     chmod 644 .env

# Copy package files
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* bun.lockb* ./

# Install dependencies based on the preferred package manager
RUN \
  if [ -f yarn.lock ]; then \
    yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then \
    npm ci --legacy-peer-deps; \
  elif [ -f pnpm-lock.yaml ]; then \
    corepack enable pnpm && pnpm i --frozen-lockfile; \
  elif [ -f bun.lockb ]; then \
    bun install --frozen-lockfile; \
  else \
    echo "Lockfile not found." && exit 1; \
  fi

# Builder stage
FROM base AS builder
WORKDIR /app

ENV NODE_ENV=production


# Copy dependencies and env file from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/.env ./.env

# Copy all project files
COPY . .


# Build the Next.js application
RUN \
  if [ -f yarn.lock ]; then \
    yarn run build; \
  elif [ -f package-lock.json ]; then \
    npm run build; \
  elif [ -f pnpm-lock.yaml ]; then \
    corepack enable pnpm && pnpm run build; \
  elif [ -f bun.lockb ]; then \
    bun run build; \
  else \
    echo "Lockfile not found." && exit 1; \
  fi

# Production stage
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV PORT=9000
ENV HOSTNAME="0.0.0.0"

# Add environment variable
# ARG NEXT_BACKEND_API_URL
# ENV NEXT_BACKEND_API_URL=${NEXT_BACKEND_API_URL}

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Create .next directory and set permissions
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Copy public directory
COPY --from=builder /app/public ./public

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Install sharp in the standalone directory
RUN npm install sharp
# Switch to non-root user
USER nextjs

EXPOSE 4000

CMD ["node", "server.js"]